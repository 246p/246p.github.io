<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024 on Junlog</title>
    <link>https://246p.github.io/categories/2024/</link>
    <description>Recent content in 2024 on Junlog</description>
    <image>
      <title>Junlog</title>
      <url>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</url>
      <link>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 21:32:30 +0900</lastBuildDate>
    <atom:link href="https://246p.github.io/categories/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Syntax analysis (2)</title>
      <link>https://246p.github.io/blog/3_2/</link>
      <pubDate>Wed, 10 Jan 2024 21:32:30 +0900</pubDate>
      <guid>https://246p.github.io/blog/3_2/</guid>
      <description>Bottom-up bottom-up parsing을 수행할때는 소괄호를 지원하는 조금 다른 CFG를 사용한다
피 연산자로 id만 지원함 left-recursion이 있어도 됨 Top-down parsing은 다음과 같은 방식으로 시작된다.
tree를 만드는 동안 token을 하나씩 읽는다. 끝이 난다면 root node는 start symbol이 된다. 다음은 id1 * id2 에 대한 예시이다. 즉 reversed order Rightmost Derivation이라고 볼 수 있다.
LR(1) Parsing 매 단계마다 다음 token을 받아올지 production rule을 적용할지 정해야 한다. top-down parsing과 동일하게 parsing table을 사용한다. Three Types of LR(1) Parsing Left-to-right, Rightmost derivation, 1 token lookahead SLR(1) Parsing : Simple LR(1) Parsing 우리가 다룰것 LALR(1) Parsing : Look-Ahead LR(1) Parsing SLR(1)보다 많은 grammar에 적용 가능하다.</description>
    </item>
    <item>
      <title>3. Syntax analysis (1)</title>
      <link>https://246p.github.io/blog/3_1/</link>
      <pubDate>Wed, 10 Jan 2024 17:47:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/3_1/</guid>
      <description>Context-free grammar CFG : defined with a set of production rules ex) E -&amp;gt; E + E E -&amp;gt; E * E E -&amp;gt; id E -&amp;gt; num
Derivation ex) E ⇒ E + E ⇒ id + E ⇒ id + num we will use ⇒* to denote arbitrary number of rewriting steps
Terminal Symbol vs Non-Terminal Symbol Terminal Symbol : can&amp;rsquo;t be rewritten anymore (+, *, id, num) Non-Terminal Symbol : can be rewritten (E)</description>
    </item>
    <item>
      <title>2. Lexical Analysis</title>
      <link>https://246p.github.io/blog/2/</link>
      <pubDate>Wed, 10 Jan 2024 17:46:04 +0900</pubDate>
      <guid>https://246p.github.io/blog/2/</guid>
      <description>Token 문자열을 해당 문자열의 의미하는 연산, 값에 따라 token으로 분류할 수 있다.
Token Example Keyword int, void, if Identifier a, var_1 Integer 10, 20 Operators +, =, * Whitespace “ “, \t, \n Regula Expression Token을 나누는 방법은 Automata를 이용한다. 이에 앞서 Regula Expression (RegEx) 에 대해서 알아볼 필요가 있다.
RegEx는 Base case와 Inductive case로 구성된다.
Regula language 𝚺 를 이용하여 symbol들의 집합을 표기한다. ex) binary numbers : 𝚺 = {&amp;lsquo;0&amp;rsquo;,&amp;lsquo;1&amp;rsquo;}, lowercase letters : 𝚺 = {&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;hellip;&amp;lsquo;z&amp;rsquo;}</description>
    </item>
    <item>
      <title>1. overview</title>
      <link>https://246p.github.io/blog/1/</link>
      <pubDate>Wed, 10 Jan 2024 17:42:23 +0900</pubDate>
      <guid>https://246p.github.io/blog/1/</guid>
      <description>컴파일러란? 컴파일러는 source language를 target language로 변환한다.
일반적으로 source = high-level, target = low-level 이다. ex) C -&amp;gt; machine code
Compiler vs Interpreter Compiler는 input program을 executable form으로 변환한다.
반면 Interpreter는 input program을 실행한다.
Compier 컴파일러는 세가지 과정으로 구분할 수 있다.Front-end -&amp;gt; Middle-end -&amp;gt; Back-end
Front-end Lexer (lexical analysis) 문자열을 token단위로 나눈다. x=y+10; -&amp;gt; VAR &amp;ldquo;X&amp;rdquo;, ASSIGN, VAR &amp;ldquo;y&amp;rdquo;, PLUS, CONST 10
Parser (syntax analysis) abstract syntax tree (AST)를 생성한다. Type Checker (semantic analysis) AST를 분석하여 type이 알맞은지 확인한다.</description>
    </item>
    <item>
      <title>4. 중간 점검</title>
      <link>https://246p.github.io/blog/hugo_4/</link>
      <pubDate>Sun, 07 Jan 2024 05:52:58 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_4/</guid>
      <description>1. 소감 하루동안 &amp;ldquo;돌아는 가는&amp;rdquo; 웹사이트를 만들었다.
웹에 대한 지식이 전무하기 때문에 많은 시행착오가 있었던것 같다.
truouble shooting 과정에서 Papermod 위키를 10번은 읽은것 같다.
아직 다음과 같이 해결해야할 문제가 남아있다.
2. 해결해야 하는 문제 prev/next가 뜻과 반대로 작용함
다른 사람의 repository를 본 결과 theme의 자체적 문제일 가능성이 높아보임
blog 제외한 menu 에서 prev/next 버튼이 없음
menu 시스템을 다시 한번 손봐야 할것 같음
이미지 첨부 안됨
가장 큰 문제인데 상대 경로를 통한 이미지 첨부가 안됨</description>
    </item>
    <item>
      <title>3. Papermod 설정</title>
      <link>https://246p.github.io/blog/hugo_3/</link>
      <pubDate>Sun, 07 Jan 2024 05:08:36 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_3/</guid>
      <description>1. hugo.yaml 사이트의 전반적인 설정을 저장하는 설정이다. 예시 코드
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 baseURL: &amp;#34;https://246p.</description>
    </item>
    <item>
      <title>2. MarkDown 문법</title>
      <link>https://246p.github.io/blog/hugo_2/</link>
      <pubDate>Sun, 07 Jan 2024 05:05:14 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_2/</guid>
      <description>0. Markdown이란 github에 들어가본 사람이라면 한번쯤 .md 확장자 파일을 본 적 있을 것이다. markdown은 간단한 문법으로 쉽게 쓰고 읽을 수 있다. 다음과 같은 장단점이 존재한다.
장점
간결하다 텍스트 에디터로 쉽게 작성 가능하다. 다양한 프로그램과 플랫폼에서 활용할 수 있다. 단점
표준이 없다. 모든 HTML을 표기할 수 없다. 1. 문법 Header 다음과 같이 제목을 표기할 수 있다.
1 2 3 # Header 1 ## Header 2 ### Header 3 Header 1 Header 2 Header 3 BlockQuote 1 2 3 &amp;gt;first &amp;gt; &amp;gt; second &amp;gt; &amp;gt; &amp;gt; third first</description>
    </item>
    <item>
      <title>1. Hugo 시작</title>
      <link>https://246p.github.io/blog/hugo_1/</link>
      <pubDate>Sat, 06 Jan 2024 18:12:26 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_1/</guid>
      <description>0. 들어가며 먼저 github.io를 이용하여 블로그를 구축하기위해서 SSG(Static Site Generator)를 정해야 한다. 대표적으로 Jkelly(Ruby), Eleventy(Node.js), Hugo(Go) 중 Hugo를 선택하였다. 한국어 레퍼런스가 부족하다는 단점이 있지만 속도측면에서 가장 빠르기 때문이다.
이 글은 Mac 사용자를 기준으로 작성되었다.
1. hugo 설치하기 먼저 home brew를 이용하여 hugo를 설치해야 한다.
1 brew install hugo 만약 home brew가 설치되어 있지 않다면 다음 명령을 사용하자
1 /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; 2. github repository 만들기 hugo 를 이용하여 사이트를 제작하기 위해서는 repository 2개가 필요하다.</description>
    </item>
    <item>
      <title>블로그를 시작하면서</title>
      <link>https://246p.github.io/blog/hugo_0/</link>
      <pubDate>Sat, 06 Jan 2024 14:39:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_0/</guid>
      <description>2학년 겨울 방학에 들어가기 앞서 나만의 공부 내용을 정리할만한 블로그를 만들어 보고싶다는 생각을 하게 되었다.
개인 서버를 이용하여 웹사이트를 구축할까도 생각해보았지만 도메인 호스팅 비용, 서버유지관리 등 측면에서 github.io를 선택하게 되었다.
앞으로 주 1회 이상 매주 공부한 내용을 포스팅할 예정이다.</description>
    </item>
  </channel>
</rss>

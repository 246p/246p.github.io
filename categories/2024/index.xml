<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024 on Junlog</title>
    <link>https://246p.github.io/categories/2024/</link>
    <description>Recent content in 2024 on Junlog</description>
    <image>
      <title>Junlog</title>
      <url>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</url>
      <link>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Feb 2024 10:13:45 +0900</lastBuildDate>
    <atom:link href="https://246p.github.io/categories/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Efficient Fuzzing by Principled Search</title>
      <link>https://246p.github.io/blog/paper_3/</link>
      <pubDate>Wed, 07 Feb 2024 10:13:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/paper_3/</guid>
      <description>Angora: Efficient Fuzzing by Principled Search
0. Abstract fuzzing은 소프트웨어 버그를 찾기 위해 널리 사용되고 있다. 그러나 최신의 fuzzer의 성능은 기대에 못미치기도 한다.
symbolic execution 기반 : high quality input , 속도가 느림 random muatation 기반 : low quality input, 속도가 빠름 이 논문에서는 새로운 mutation-based fuzzer인 Angora를 제시한다.
Angora의 목표는 symbolic execution 없이 path constraint를 해결함으로 branch coverage를 증가시키는 것이다. 다음과 같은 핵심 기술을 도입하였다.
scalable byte-level taint tracking context-sensetive branch count search based on gradient descent input legnth exploration LAVA-M data set에서 거의 모든 injected bug를 찾았고 다른 모든 fuzzer보다 더 많은 bug를 찾았다.</description>
    </item>
    <item>
      <title>2. Automated Whitebox Fuzz Testing</title>
      <link>https://246p.github.io/blog/paper_2/</link>
      <pubDate>Fri, 02 Feb 2024 01:26:16 +0900</pubDate>
      <guid>https://246p.github.io/blog/paper_2/</guid>
      <description>Automated Whitebox Fuzz Testing
0. Abstract fuzz testing은 소프트웨어 보안 취약점을 찾는 효과적인 기술이다. 전통적인 fuzzer들은 well-formed input에 random mutations을 적용하고 결과값을 테스트한다. 이 논문에서는 Symbolic execution과 Dynamic test generation을 적용하여 alternative whitebox fuzz testing을 구현하였다.
이 논문에서는 well-formed input에 따라 실제로 실행되는 것을 기록하고, symbolicaly evalution하고, 프로그램이 입력을 어떻게 사용하는지 확인하여 입력에 대한 제약조건을 수집한다. 수집한 제약조건들을 하나씩 부정하고 constraint solver를 이용하여 solve한다. 이를 통해 프로그램에서 다른 경로를 실행하는 새로운 input을 생성한다.</description>
    </item>
    <item>
      <title>1. All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution</title>
      <link>https://246p.github.io/blog/paper_1/</link>
      <pubDate>Fri, 02 Feb 2024 01:26:10 +0900</pubDate>
      <guid>https://246p.github.io/blog/paper_1/</guid>
      <description>All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution
0. Abstract Dynamic taint analysis &amp;amp; forward Symbolic execution을 이용하여 다음과 같은 일을 많이 수행함
1. Input Filter Generation 2. Test case generation 3. Vulnerabiliry discovery 이와 관련하여 이 논문은 두가지 파트로 되어있음
1. dynamic taint analysis와 forward symbolic execution을 수행할 수 있는 general language 제시 2. 이를 구현함에 있어서 important implementation choices, common pitfalls, considerations 1.</description>
    </item>
    <item>
      <title>0. 읽을 논문</title>
      <link>https://246p.github.io/blog/paper_0/</link>
      <pubDate>Thu, 01 Feb 2024 10:13:41 +0900</pubDate>
      <guid>https://246p.github.io/blog/paper_0/</guid>
      <description>Abstract 요약 Penetrating conditionals REDQUEEN: Fuzzing with Input-to-State Correspondence Link
최근 몇년간 fuzz 기반 automated software testing이 대두되고 있다. 특히 feedback-driven fuzz testing은 magic byte와 checksum은의 문제가 있다.
비용이많이드는 taint tracking 과 symbolic execution이 있다. 하지만 이러한 방법은 source code에 대한 접근, environment (OS나 library function call)에 대한 엄밀한 정보가 필요하다.
이 논문에서 taint tracking과 symbolic execution에 비해 가벼우면서 효과적인 대안을 소개한다. 이 방법은 large binary application과 알려지지 않은 environment에 쉽게 확장 가능하다.</description>
    </item>
    <item>
      <title>4. 함수 정의와 호출</title>
      <link>https://246p.github.io/blog/pl_4/</link>
      <pubDate>Wed, 24 Jan 2024 13:38:09 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_4/</guid>
      <description>4. 함수 정의와 호출 앞에서 선언한 언어를 확장하여 함수를 정의한다.
4.1 문법구조 프로그램에서 함수를 사용하려면 함수 생성(선언)과 호출을 지원해야한다.
E -&amp;gt; n | E1 + E2 | E1 - E2 | E1 * E2 | E1 / E2 | x | let x = E1 in E2 | if E1 then E2 else E3 | iszero E | fun x E 함수 생성식 | E1 E2 함수 호출식 fun x E x를 인자로 받아서 E의 계산 결과를 반환하는 함수를 정의하는 구문이다.</description>
    </item>
    <item>
      <title>3. 변수와 환경</title>
      <link>https://246p.github.io/blog/pl_3/</link>
      <pubDate>Wed, 24 Jan 2024 13:37:54 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_3/</guid>
      <description>3. 변수와 환경 3.1 문법구조 우리가 1장에서 선언한 정수형 언어를 다음과 같이 확장한다.
E -&amp;gt; n | E1 + E2 | E1 - E2 | E1 * E2 | E1 / E2 | x 변수 | let x = E1 in E2 let식 | if E1 then E2 else E3 조건식 | iszero E bool식 x 먼저 프로그램에서 식이 올 수 있는 위치에 변수 x를 사용할 수 있도록 하였다.
let x = E1 in E2 변수 x를 선언하는 식이다.</description>
    </item>
    <item>
      <title>1. 귀납법</title>
      <link>https://246p.github.io/blog/pl_1/</link>
      <pubDate>Wed, 24 Jan 2024 13:37:50 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_1/</guid>
      <description>1.귀납법 1.1 집합의 귀납적 정의 귀납법을 이용하여 집합을 정의할 수 있다.
S를 다음을 만족하는 가장 &amp;lsquo;작은&amp;rsquo; 자연수 집합으로 정의해보자
0 ∈ S n ∈ S ⇒ n + 3 ∈ S {0,1,2,3,4,&amp;hellip;} 도 만족하지만 {0,3,6,9,&amp;hellip;}가 가장 작은 집합이다.
추론 규칙 추론 규칙을 이용한다면 다음과 같이 정의할 수 있다.
n ∈ S ------- ---------- 0 ∈ S (n + 3) ∈ S 추론규칙을 CFG를 이용하여 표현하기도 한다.
n → 0 | n + 3 1.</description>
    </item>
    <item>
      <title>Fsharp_2</title>
      <link>https://246p.github.io/blog/fsharp_2/</link>
      <pubDate>Wed, 17 Jan 2024 13:09:40 +0900</pubDate>
      <guid>https://246p.github.io/blog/fsharp_2/</guid>
      <description> </description>
    </item>
    <item>
      <title>1</title>
      <link>https://246p.github.io/blog/fsharp_1/</link>
      <pubDate>Wed, 17 Jan 2024 12:57:33 +0900</pubDate>
      <guid>https://246p.github.io/blog/fsharp_1/</guid>
      <description>F#이란? </description>
    </item>
    <item>
      <title>2. Introduction to Software Vulnerability</title>
      <link>https://246p.github.io/blog/hacking_2/</link>
      <pubDate>Wed, 10 Jan 2024 23:10:32 +0900</pubDate>
      <guid>https://246p.github.io/blog/hacking_2/</guid>
      <description>Bug and Vulnerability Bug : error in program that make it malfunction Vulunerability : bug that causes security issues Buffer Overflow &amp;amp; Memory Corruption C has no automatic check on array boundary
Allow writing past the end of an array Buffer OverFlow corrupt other variables and data in memory Setuid Bit (SUID) Linux 환경에서 passwd 명령을 입력하면 /etc/passwd 에 저장된 정보를 변경한다.
/만약 /etc/passwd 명령어가</description>
    </item>
    <item>
      <title>1. Overview</title>
      <link>https://246p.github.io/blog/hacking_1/</link>
      <pubDate>Wed, 10 Jan 2024 23:04:47 +0900</pubDate>
      <guid>https://246p.github.io/blog/hacking_1/</guid>
      <description>CIA Properties Key properties that we want to achieve for security
Confidentiality: secrets must be kept secret Integrity: data should not be tampered Availability: the system must be usable Common Types of Attacks Denai of service Shutting down system or service runnig on it ex) Blue Screen, 503 Error Code execution Running arbitary, unintended code Privilege escalation Gaining unintended privileges Information Leakage Accessing sensetive data ex) Hartblled bug </description>
    </item>
    <item>
      <title>3. Syntax analysis (2)</title>
      <link>https://246p.github.io/blog/compiler_3_2/</link>
      <pubDate>Wed, 10 Jan 2024 21:32:30 +0900</pubDate>
      <guid>https://246p.github.io/blog/compiler_3_2/</guid>
      <description>Bottom-up bottom-up parsing을 수행할때는 소괄호를 지원하는 조금 다른 CFG를 사용한다
피 연산자로 id만 지원함 left-recursion이 있어도 됨 Top-down parsing은 다음과 같은 방식으로 시작된다.
tree를 만드는 동안 token을 하나씩 읽는다. 끝이 난다면 root node는 start symbol이 된다. 다음은 id1 * id2 에 대한 예시이다. 즉 reversed order Rightmost Derivation이라고 볼 수 있다.
LR(1) Parsing 매 단계마다 다음 token을 받아올지 production rule을 적용할지 정해야 한다. top-down parsing과 동일하게 parsing table을 사용한다. Three Types of LR(1) Parsing Left-to-right, Rightmost derivation, 1 token lookahead SLR(1) Parsing : Simple LR(1) Parsing 우리가 다룰것 LALR(1) Parsing : Look-Ahead LR(1) Parsing SLR(1)보다 많은 grammar에 적용 가능하다.</description>
    </item>
    <item>
      <title>3. Syntax analysis (1)</title>
      <link>https://246p.github.io/blog/compiler_3_1/</link>
      <pubDate>Wed, 10 Jan 2024 17:47:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/compiler_3_1/</guid>
      <description>Context-free grammar CFG : defined with a set of production rules ex) E -&amp;gt; E + E E -&amp;gt; E * E E -&amp;gt; id E -&amp;gt; num
Derivation ex) E ⇒ E + E ⇒ id + E ⇒ id + num we will use ⇒* to denote arbitrary number of rewriting steps
Terminal Symbol vs Non-Terminal Symbol Terminal Symbol : can&amp;rsquo;t be rewritten anymore (+, *, id, num) Non-Terminal Symbol : can be rewritten (E)</description>
    </item>
    <item>
      <title>2. Lexical Analysis</title>
      <link>https://246p.github.io/blog/compiler_2/</link>
      <pubDate>Wed, 10 Jan 2024 17:46:04 +0900</pubDate>
      <guid>https://246p.github.io/blog/compiler_2/</guid>
      <description>Token 문자열을 해당 문자열의 의미하는 연산, 값에 따라 token으로 분류할 수 있다.
Token Example Keyword int, void, if Identifier a, var_1 Integer 10, 20 Operators +, =, * Whitespace “ “, \t, \n Regula Expression Token을 나누는 방법은 Automata를 이용한다. 이에 앞서 Regula Expression (RegEx) 에 대해서 알아볼 필요가 있다.
RegEx는 Base case와 Inductive case로 구성된다.
Regula language 𝚺 를 이용하여 symbol들의 집합을 표기한다. ex) binary numbers : 𝚺 = {&amp;lsquo;0&amp;rsquo;,&amp;lsquo;1&amp;rsquo;}, lowercase letters : 𝚺 = {&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;hellip;&amp;lsquo;z&amp;rsquo;}</description>
    </item>
    <item>
      <title>1. overview</title>
      <link>https://246p.github.io/blog/compiler_1/</link>
      <pubDate>Wed, 10 Jan 2024 17:42:23 +0900</pubDate>
      <guid>https://246p.github.io/blog/compiler_1/</guid>
      <description>컴파일러란? 컴파일러는 source language를 target language로 변환한다.
일반적으로 source = high-level, target = low-level 이다. ex) C -&amp;gt; machine code
Compiler vs Interpreter Compiler는 input program을 executable form으로 변환한다.
반면 Interpreter는 input program을 실행한다.
Compier 컴파일러는 세가지 과정으로 구분할 수 있다.Front-end -&amp;gt; Middle-end -&amp;gt; Back-end
Front-end Lexer (lexical analysis) 문자열을 token단위로 나눈다. x=y+10; -&amp;gt; VAR &amp;ldquo;X&amp;rdquo;, ASSIGN, VAR &amp;ldquo;y&amp;rdquo;, PLUS, CONST 10
Parser (syntax analysis) abstract syntax tree (AST)를 생성한다. Type Checker (semantic analysis) AST를 분석하여 type이 알맞은지 확인한다.</description>
    </item>
    <item>
      <title>4. 중간 점검</title>
      <link>https://246p.github.io/blog/hugo_4/</link>
      <pubDate>Sun, 07 Jan 2024 05:52:58 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_4/</guid>
      <description>1. 소감 하루동안 &amp;ldquo;돌아는 가는&amp;rdquo; 웹사이트를 만들었다.
웹에 대한 지식이 전무하기 때문에 많은 시행착오가 있었던것 같다.
truouble shooting 과정에서 Papermod 위키를 10번은 읽은것 같다.
아직 다음과 같이 해결해야할 문제가 남아있다.
2. 해결해야 하는 문제 prev/next가 뜻과 반대로 작용함
다른 사람의 repository를 본 결과 theme의 자체적 문제일 가능성이 높아보임
blog 제외한 menu 에서 prev/next 버튼이 없음
menu 시스템을 다시 한번 손봐야 할것 같음
이미지 첨부 안됨
가장 큰 문제인데 상대 경로를 통한 이미지 첨부가 안됨</description>
    </item>
    <item>
      <title>3. Papermod 설정</title>
      <link>https://246p.github.io/blog/hugo_3/</link>
      <pubDate>Sun, 07 Jan 2024 05:08:36 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_3/</guid>
      <description>1. hugo.yaml 사이트의 전반적인 설정을 저장하는 설정이다. 예시 코드
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 baseURL: &amp;#34;https://246p.</description>
    </item>
    <item>
      <title>2. MarkDown 문법</title>
      <link>https://246p.github.io/blog/hugo_2/</link>
      <pubDate>Sun, 07 Jan 2024 05:05:14 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_2/</guid>
      <description>0. Markdown이란 github에 들어가본 사람이라면 한번쯤 .md 확장자 파일을 본 적 있을 것이다. markdown은 간단한 문법으로 쉽게 쓰고 읽을 수 있다. 다음과 같은 장단점이 존재한다.
장점
간결하다 텍스트 에디터로 쉽게 작성 가능하다. 다양한 프로그램과 플랫폼에서 활용할 수 있다. 단점
표준이 없다. 모든 HTML을 표기할 수 없다. 1. 문법 Header 다음과 같이 제목을 표기할 수 있다.
1 2 3 # Header 1 ## Header 2 ### Header 3 Header 1 Header 2 Header 3 BlockQuote 1 2 3 &amp;gt;first &amp;gt; &amp;gt; second &amp;gt; &amp;gt; &amp;gt; third first</description>
    </item>
    <item>
      <title>1. Hugo 시작</title>
      <link>https://246p.github.io/blog/hugo_1/</link>
      <pubDate>Sat, 06 Jan 2024 18:12:26 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_1/</guid>
      <description>0. 들어가며 먼저 github.io를 이용하여 블로그를 구축하기위해서 SSG(Static Site Generator)를 정해야 한다. 대표적으로 Jkelly(Ruby), Eleventy(Node.js), Hugo(Go) 중 Hugo를 선택하였다. 한국어 레퍼런스가 부족하다는 단점이 있지만 속도측면에서 가장 빠르기 때문이다.
이 글은 Mac 사용자를 기준으로 작성되었다.
1. hugo 설치하기 먼저 home brew를 이용하여 hugo를 설치해야 한다.
1 brew install hugo 만약 home brew가 설치되어 있지 않다면 다음 명령을 사용하자
1 /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; 2. github repository 만들기 hugo 를 이용하여 사이트를 제작하기 위해서는 repository 2개가 필요하다.</description>
    </item>
    <item>
      <title>블로그를 시작하면서</title>
      <link>https://246p.github.io/blog/hugo_0/</link>
      <pubDate>Sat, 06 Jan 2024 14:39:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/hugo_0/</guid>
      <description>2학년 겨울 방학에 들어가기 앞서 나만의 공부 내용을 정리할만한 블로그를 만들어 보고싶다는 생각을 하게 되었다.
개인 서버를 이용하여 웹사이트를 구축할까도 생각해보았지만 도메인 호스팅 비용, 서버유지관리 등 측면에서 github.io를 선택하게 되었다.
앞으로 주 1회 이상 매주 공부한 내용을 포스팅할 예정이다.</description>
    </item>
  </channel>
</rss>

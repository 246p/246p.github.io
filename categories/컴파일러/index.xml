<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>컴파일러 on Junlog</title>
    <link>https://246p.github.io/categories/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC/</link>
    <description>Recent content in 컴파일러 on Junlog</description>
    <image>
      <title>Junlog</title>
      <url>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</url>
      <link>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 21:32:30 +0900</lastBuildDate>
    <atom:link href="https://246p.github.io/categories/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Syntax analysis (2)</title>
      <link>https://246p.github.io/blog/3_2/</link>
      <pubDate>Wed, 10 Jan 2024 21:32:30 +0900</pubDate>
      <guid>https://246p.github.io/blog/3_2/</guid>
      <description>Bottom-up bottom-up parsing을 수행할때는 소괄호를 지원하는 조금 다른 CFG를 사용한다
피 연산자로 id만 지원함 left-recursion이 있어도 됨 Top-down parsing은 다음과 같은 방식으로 시작된다.
tree를 만드는 동안 token을 하나씩 읽는다. 끝이 난다면 root node는 start symbol이 된다. 다음은 id1 * id2 에 대한 예시이다. 즉 reversed order Rightmost Derivation이라고 볼 수 있다.
LR(1) Parsing Left-to-right</description>
    </item>
    <item>
      <title>3. Syntax analysis (1)</title>
      <link>https://246p.github.io/blog/3_1/</link>
      <pubDate>Wed, 10 Jan 2024 17:47:45 +0900</pubDate>
      <guid>https://246p.github.io/blog/3_1/</guid>
      <description>Context-free grammar CFG : defined with a set of production rules ex) E -&amp;gt; E + E E -&amp;gt; E * E E -&amp;gt; id E -&amp;gt; num
Derivation ex) E ⇒ E + E ⇒ id + E ⇒ id + num we will use ⇒* to denote arbitrary number of rewriting steps
Terminal Symbol vs Non-Terminal Symbol Terminal Symbol : can&amp;rsquo;t be rewritten anymore (+, *, id, num) Non-Terminal Symbol : can be rewritten (E)</description>
    </item>
    <item>
      <title>2. Lexical Analysis</title>
      <link>https://246p.github.io/blog/2/</link>
      <pubDate>Wed, 10 Jan 2024 17:46:04 +0900</pubDate>
      <guid>https://246p.github.io/blog/2/</guid>
      <description>Token 문자열을 해당 문자열의 의미하는 연산, 값에 따라 token으로 분류할 수 있다.
Token Example Keyword int, void, if Identifier a, var_1 Integer 10, 20 Operators +, =, * Whitespace “ “, \t, \n Regula Expression Token을 나누는 방법은 Automata를 이용한다. 이에 앞서 Regula Expression (RegEx) 에 대해서 알아볼 필요가 있다.
RegEx는 Base case와 Inductive case로 구성된다.
Regula language 𝚺 를 이용하여 symbol들의 집합을 표기한다. ex) binary numbers : 𝚺 = {&amp;lsquo;0&amp;rsquo;,&amp;lsquo;1&amp;rsquo;}, lowercase letters : 𝚺 = {&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;hellip;&amp;lsquo;z&amp;rsquo;}</description>
    </item>
    <item>
      <title>1. overview</title>
      <link>https://246p.github.io/blog/1/</link>
      <pubDate>Wed, 10 Jan 2024 17:42:23 +0900</pubDate>
      <guid>https://246p.github.io/blog/1/</guid>
      <description>컴파일러란? 컴파일러는 source language를 target language로 변환한다.
일반적으로 source = high-level, target = low-level 이다. ex) C -&amp;gt; machine code
Compiler vs Interpreter Compiler는 input program을 executable form으로 변환한다.
반면 Interpreter는 input program을 실행한다.
Compier 컴파일러는 세가지 과정으로 구분할 수 있다.Front-end -&amp;gt; Middle-end -&amp;gt; Back-end
Front-end Lexer (lexical analysis) 문자열을 token단위로 나눈다. x=y+10; -&amp;gt; VAR &amp;ldquo;X&amp;rdquo;, ASSIGN, VAR &amp;ldquo;y&amp;rdquo;, PLUS, CONST 10
Parser (syntax analysis) abstract syntax tree (AST)를 생성한다. Type Checker (semantic analysis) AST를 분석하여 type이 알맞은지 확인한다.</description>
    </item>
  </channel>
</rss>

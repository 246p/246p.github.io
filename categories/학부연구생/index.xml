<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>학부연구생 on Junlog</title>
    <link>https://246p.github.io/categories/%ED%95%99%EB%B6%80%EC%97%B0%EA%B5%AC%EC%83%9D/</link>
    <description>Recent content in 학부연구생 on Junlog</description>
    <image>
      <title>Junlog</title>
      <url>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</url>
      <link>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 02 Feb 2024 01:26:16 +0900</lastBuildDate>
    <atom:link href="https://246p.github.io/categories/%ED%95%99%EB%B6%80%EC%97%B0%EA%B5%AC%EC%83%9D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2. Automated Whitebox Fuzz Testing</title>
      <link>https://246p.github.io/blog/paper_2/</link>
      <pubDate>Fri, 02 Feb 2024 01:26:16 +0900</pubDate>
      <guid>https://246p.github.io/blog/paper_2/</guid>
      <description>Automated Whitebox Fuzz Testing
0. Abstract fuzz testing은 소프트웨어 보안 취약점을 찾는 효과적인 기술이다. 전통적인 fuzzer들은 well-formed input에 random mutations을 적용하고 결과값을 테스트한다. 이 논문에서는 Symbolic execution과 Dynamic test generation을 적용하여 alternative whitebox fuzz testing을 구현하였다.
이 논문에서는 well-formed input에 따라 실제로 실행되는 것을 기록하고, symbolicaly evalution하고, 프로그램이 입력을 어떻게 사용하는지 확인하여 입력에 대한 제약조건을 수집한다. 수집한 제약조건들을 하나씩 부정하고 constraint solver를 이용하여 solve한다. 이를 통해 프로그램에서 다른 경로를 실행하는 새로운 input을 생성한다.</description>
    </item>
    <item>
      <title>4. 함수 정의와 호출</title>
      <link>https://246p.github.io/blog/pl_4/</link>
      <pubDate>Wed, 24 Jan 2024 13:38:09 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_4/</guid>
      <description>4. 함수 정의와 호출 앞에서 선언한 언어를 확장하여 함수를 정의한다.
4.1 문법구조 프로그램에서 함수를 사용하려면 함수 생성(선언)과 호출을 지원해야한다.
E -&amp;gt; n | E1 + E2 | E1 - E2 | E1 * E2 | E1 / E2 | x | let x = E1 in E2 | if E1 then E2 else E3 | iszero E | fun x E 함수 생성식 | E1 E2 함수 호출식 fun x E x를 인자로 받아서 E의 계산 결과를 반환하는 함수를 정의하는 구문이다.</description>
    </item>
    <item>
      <title>3. 변수와 환경</title>
      <link>https://246p.github.io/blog/pl_3/</link>
      <pubDate>Wed, 24 Jan 2024 13:37:54 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_3/</guid>
      <description>3. 변수와 환경 3.1 문법구조 우리가 1장에서 선언한 정수형 언어를 다음과 같이 확장한다.
E -&amp;gt; n | E1 + E2 | E1 - E2 | E1 * E2 | E1 / E2 | x 변수 | let x = E1 in E2 let식 | if E1 then E2 else E3 조건식 | iszero E bool식 x 먼저 프로그램에서 식이 올 수 있는 위치에 변수 x를 사용할 수 있도록 하였다.
let x = E1 in E2 변수 x를 선언하는 식이다.</description>
    </item>
    <item>
      <title>1. 귀납법</title>
      <link>https://246p.github.io/blog/pl_1/</link>
      <pubDate>Wed, 24 Jan 2024 13:37:50 +0900</pubDate>
      <guid>https://246p.github.io/blog/pl_1/</guid>
      <description>1.귀납법 1.1 집합의 귀납적 정의 귀납법을 이용하여 집합을 정의할 수 있다.
S를 다음을 만족하는 가장 &amp;lsquo;작은&amp;rsquo; 자연수 집합으로 정의해보자
0 ∈ S n ∈ S ⇒ n + 3 ∈ S {0,1,2,3,4,&amp;hellip;} 도 만족하지만 {0,3,6,9,&amp;hellip;}가 가장 작은 집합이다.
추론 규칙 추론 규칙을 이용한다면 다음과 같이 정의할 수 있다.
n ∈ S ------- ---------- 0 ∈ S (n + 3) ∈ S 추론규칙을 CFG를 이용하여 표현하기도 한다.
n → 0 | n + 3 1.</description>
    </item>
    <item>
      <title>1</title>
      <link>https://246p.github.io/blog/fsharp_1/</link>
      <pubDate>Wed, 17 Jan 2024 12:57:33 +0900</pubDate>
      <guid>https://246p.github.io/blog/fsharp_1/</guid>
      <description>F#이란? </description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>작성중 on Junlog</title>
    <link>https://246p.github.io/tags/%EC%9E%91%EC%84%B1%EC%A4%91/</link>
    <description>Recent content in 작성중 on Junlog</description>
    <image>
      <title>Junlog</title>
      <url>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</url>
      <link>https://github.com/246p/blog/blob/main/Hugo/blog/Cover.png?raw=true</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 21:32:30 +0900</lastBuildDate>
    <atom:link href="https://246p.github.io/tags/%EC%9E%91%EC%84%B1%EC%A4%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Syntax analysis (2)</title>
      <link>https://246p.github.io/blog/compiler_3_2/</link>
      <pubDate>Wed, 10 Jan 2024 21:32:30 +0900</pubDate>
      <guid>https://246p.github.io/blog/compiler_3_2/</guid>
      <description>Bottom-up bottom-up parsing을 수행할때는 소괄호를 지원하는 조금 다른 CFG를 사용한다
피 연산자로 id만 지원함 left-recursion이 있어도 됨 Top-down parsing은 다음과 같은 방식으로 시작된다.
tree를 만드는 동안 token을 하나씩 읽는다. 끝이 난다면 root node는 start symbol이 된다. 다음은 id1 * id2 에 대한 예시이다. 즉 reversed order Rightmost Derivation이라고 볼 수 있다.
LR(1) Parsing 매 단계마다 다음 token을 받아올지 production rule을 적용할지 정해야 한다. top-down parsing과 동일하게 parsing table을 사용한다. Three Types of LR(1) Parsing Left-to-right, Rightmost derivation, 1 token lookahead SLR(1) Parsing : Simple LR(1) Parsing 우리가 다룰것 LALR(1) Parsing : Look-Ahead LR(1) Parsing SLR(1)보다 많은 grammar에 적용 가능하다.</description>
    </item>
  </channel>
</rss>
